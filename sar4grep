#! /usr/bin/env ruby
# coding: utf-8
# Convert sar text file to be greppable like sadf

require "optparse"
require "date"


class Sar4GrepCommand


  def initialize()
  end


  def opt_parse(argv)
    opts = {}
    
    OptionParser.new do |opt|
      begin
        opt.version = '0.1.0'
        opt.banner += " FILE [FILE...]"
        opt.separator("\nOptions:")
        
        opt.on('-p=DATE_PATTERN',
          'collected date pattern ("%Y-%m-%d")') {|v| opts[:p] = v}
        opt.on('--raw-time',
          'print time without reformatting') {|v| opts[:raw_time] = v}
        opt.parse!(ARGV)
      rescue => e
        $stderr.puts "ERROR: #{e}.\n#{opt}"
        exit 1
      end
    end
    
    return opts
  end


  def print_values(tod, keycols, cols, subkey = nil)
    if subkey.nil?
      cols[1..-1].each_with_index do |value, index|
        puts "#{tod} #{keycols[index]} #{value}"
      end
    else
      cols[2..-1].each_with_index do |value, index|
        puts "#{tod} #{keycols[0]}.#{subkey}.#{keycols[index+1]} #{value}"
      end
      
    end
  end
  
  def to_time24(time_text)
    time24 = ""
    if time_text.end_with?("AM")
      time12 = time_text.sub("AM", "")
      if time12.start_with?("12:")
        h,m,s = time12.split(":")
        time24 = ["00", m, s].join(":")
      else
        time24 = time12
      end
    elsif time_text.end_with?("PM")
      time12 = time_text.sub("PM", "")
      if time12.start_with?("12:")
        time24 = time12
      else
        h, m, s = time12.split(":")
        time24 = ["#{h.to_i + 12}", m, s].join(":")
      end
    else
      time24 = time_text
    end
    
    return time24
  end


  def main(argv)
    opts = opt_parse(argv)
    @date_pattern = opts[:p] ? opts[:p] : "%Y-%m-%d"
    @is_raw_time = opts[:raw_time] ? opts[:raw_time] : false
    
    collected_on = nil
    keycols = nil
    subkey_keys = ["CPU", "INTR", "TTY"]
    is_subkey_available = false

    ARGF.each_line do |line|
      line.chomp!
      cols = line.split(" ")
      
      if cols[0] =~ /Linux/
        os, version, server, date, arch, = cols
        begin
          ymd = Date.strptime(date, @date_pattern)
          if ymd.year < 2000
            raise ArgumentError
          end
        rescue ArgumentError => e
          $stderr.puts "ERROR: date pattern #{@date_pattern} unmatch with #{date}. Modify -p for your sar date pattern."
          exit 1
        end
        
        collected_on = ymd
        next
      end
      
      if !cols[1].nil? && (cols[1] == "AM" || cols[1] == "PM")
        time = cols.shift
        cols[0] = "#{time}#{cols[0]}"
      end
      
      if cols[0] =~ /\d\d:\d\d:\d\d/
        if @is_raw_time
          collected_at = cols[0]
        else
          collected_at = to_time24(cols[0])
        end
        
        tod = "#{collected_on} #{collected_at}"
        
        if cols[1] =~ /[A-z]/
          is_subkey_available = subkey_keys.include?(cols[1])
          
          if (cols[2].nil? || cols[2].empty?) || cols[2] =~ /[A-z]/
            keycols = cols[1..-1]
          else
            print_values(tod, keycols, cols, cols[1])
          end
        elsif is_subkey_available
          print_values(tod, keycols, cols, cols[1])
        else
          print_values(tod, keycols, cols)
        end
      else
        is_subkey_available = false
      end
     
    end
    
  end # main

end # class


################################

# puts Sar4GrepCommand.new.to_time24(ARGV[0])

Sar4GrepCommand.new.main(ARGV)

exit 0

# EOF
